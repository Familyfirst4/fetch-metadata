#!/bin/bash

usage() { echo "Usage: $0 -p [major | minor | patch]" 1>&2; exit 1; }

while getopts "p:" o; do
  case "${o}" in
    p)
      patch_level=${OPTARG}
      (( patch_level == 'major' || patch_level == 'minor' || patch_level == 'patch'))
      ;;
    *)
      usage
      ;;
  esac
done

echo "$patch_level"

if [[ -z "${patch_level}" ]]; then
  usage
fi

new_version=$(npm version "${patch_level}" --no-git-tag-version)
git checkout -b "${new_version}"-release-notes
# NOTE: For OSX compatability, -i must have an empty string argument passed
sed -i "" "s|dependabot/fetch-metadata@v[0-9.]*|dependabot/fetch-metadata@v${new_version}|g" "README.md"
git add package.json package-lock.json README.md
git commit -m "${new_version}"

echo "Branch prepared for ${new_version}"
